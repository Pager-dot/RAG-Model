from gtts import gTTS
from pydub import AudioSegment
import os

# --- Configuration ---
INPUT_TEXT = "Hello! This is a human-like voice generated by Google's Text-to-Speech service. The audio is then converted into a WAV file."
MP3_FILENAME = "temp_output.mp3"
WAV_FILENAME = "tts_output.wav"

def text_to_wav(text, mp3_file, wav_file):
    """
    Converts text to speech using gTTS (MP3) and then converts the MP3 to WAV.
    """
    print("--- Text-to-Speech Process ---")
    
    # 1. Generate MP3 using gTTS (Requires Internet, uses high-quality voice)
    try:
        print(f"1. Generating speech for: '{text[:50]}...'")
        # gTTS relies on a cloud API, so the quality is high (human-like)
        tts = gTTS(text=text, lang='en', slow=False)
        tts.save(mp3_file)
        print(f"   ‚úÖ Saved temporary MP3 file: {mp3_file}")
    except Exception as e:
        print(f"   ‚ùå gTTS error (check internet connection): {e}")
        return

    # 2. Convert MP3 to WAV using pydub (Requires FFmpeg)
    try:
        print(f"2. Converting MP3 to WAV...")
        # AudioSegment loads the MP3 file
        audio = AudioSegment.from_mp3(mp3_file)
        # export saves it as a WAV file
        audio.export(wav_file, format="wav")
        print(f"   ‚úÖ Final WAV file saved: {wav_file}")
        
    except FileNotFoundError:
        print("\n   üö® ERROR: FFmpeg not found!")
        print("   Please ensure FFmpeg is installed and accessible in your system's PATH.")
        
    except Exception as e:
        print(f"   ‚ùå pydub conversion error: {e}")
        
    finally:
        # 3. Clean up the temporary MP3 file
        if os.path.exists(mp3_file):
            os.remove(mp3_file)
            print(f"3. Cleaned up temporary file: {mp3_file}")
            
# --- Main execution block ---
if __name__ == "__main__":
    
    text_to_wav(INPUT_TEXT, MP3_FILENAME, WAV_FILENAME)